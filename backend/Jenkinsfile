pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'seungh1024/wefit'
        DOCKER_IMAGE = ''
    }

    stages {
        stage('Prepare') {
            steps {
                sh 'echo "Clonning Repository"'
                git branch: 'develop-back',
                    url: 'https://lab.ssafy.com/s07-webmobile1-sub2/S07P12B206.git',
                    credentialsId: 'IDPW'
            }
            post {
                success {
                     sh 'echo "Successfully Cloned Repository"'
                 }
                 failure {
                     sh 'echo "Fail Cloned Repository"'
                 }
            }
        }

        stage('Bulid Gradle') {
            steps {
                sh 'echo "Bulid Gradle Start"'
                dir('backend') {
                    sh "chmod +x gradlew"
                    sh """
                    ./gradlew clean build --exclude-task test
                    """
                }
            }
            post {
                 failure {
                     sh 'echo "Bulid Gradle Fail"'
                }
            }
        }

        stage('Bulid & Run') {
            steps {
                dir('backend'){
                    sh 'echo " Image Bulid Start"'
                    sh 'ls'
                    sh 'cat docker-compose.yml'
                    script {
    //                     DOCKER_IMAGE = docker.build DOCKER_IMAGE_NAME + ":latest"
//                         sh 'docker build -t seungh1024/wefit .'
//                         sh "chmod +x gradlew"
//                         sh './gradlew bootBuildImage --imageName=seungh1024/wefit'
                        sh 'chmod +x /usr/local/bin/docker-compose'
                        sh 'docker-compose stop'
                        sh 'docker-compose up -d'
                    }
                }


            }

            post {
                failure {
                    sh 'echo "Bulid Docker Fail"'
                }
              }
        }

//         stage('Push Docker') {
//             steps {
//                 sh 'echo "Docker Image Push Start"'
//                 script {
//                     docker.withRegistry('', "DockerIdPw") {
// //                         DOCKER_IMAGE.push("latest")
// //                         sh 'docker tag seungh1024/wefit:latest seungh1024/wefit:latest'
//                         sh 'docker push seungh1024/wefit'
//                     }
//                 }
//
//
//
//
//             }
//             post {
//                 success {
//                     sh 'docker rmi $(docker images -q -f dangling=true)'
//                 }
//                 failure {
//                     error 'Docker Image Push Fail'
//                 }
//             }
//         }
//
//
//        stage('Remote Server Docker Pull') {
//             steps([$class: 'BapSshPromotionPublisherPlugin']) {
//                 sh 'echo "Remote Server Docker Pull Start"'
//                  sshPublisher(
//                     continueOnError: false, failOnError: true,
//                     publishers: [
//                         sshPublisherDesc(
//                             configName: "wefit-server",
//                             verbose: true,
//                             transfers: [
//                                 sshTransfer(
//                                     execCommand: "sh /home/ubuntu/spring-container.sh"
//                                 )
//                             ]
//                         )
//                     ]
//                 )
//             }
//
//             post {
//                  success {
//                     sh 'echo "Completed Remote Server Docker Pull"'
//                 }
//                 failure {
//                     sh 'echo "Fail Remote Server Docker Pull"'
//                 }
//             }
//         }
    }
}